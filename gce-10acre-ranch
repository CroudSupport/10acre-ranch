#!/bin/bash

set -e

if [ $(whoami) == "root" ];then
    echo "Do not run as root!" >&2
    exit 1
fi

gcloud -v 2>&1 > /dev/null || { echo "gcloud command not found." >&2 ;exit 1; }

print_help()
{
cat >&2 <<EOF
gce-10acre-ranch Usage:
    gce-10acre-ranch [opts] 
    -d - DELETE ALL NODES
    -i - Show the IP address of the master
    -h - Print this message
    -l - list nodes
    -n - number of nodes 
EOF
}

list_nodes()
{
    gcloud compute instances list --zone us-central1-f --regex "$(whoami)-rancher-dev.*"
}

delete_nodes()
{
    NODES=$(list_nodes|grep -v ^NAME|cut -d' ' -f1)

    # This will prompt the user to confirm.
    gcloud compute instances delete --zone us-central1-f $NODES
}

get_master_ip()
{
    IP=$(gcloud compute instances describe "$(whoami)-rancher-dev-master-0" --zone us-central1-f|grep natIP |cut -d':' -f2)
    echo $IP
}


while getopts ":dhiln:" opt;do
    case $opt in
    d)
        delete_nodes
        exit 0
        ;;
    h)
        print_help
        exit 1
        ;;
    i)
        get_master_ip
        exit 0
        ;;
    l)
        list_nodes
        exit 0
        ;;
    n)
        shift 1
        INSTANCES="";for i in $(seq 1 $1);do INSTANCES="$(whoami)-rancher-dev-${i} ${INSTANCES}";done
        ;;
    \?)
        echo "Invalid arguemnts"
        print_help
        exit 1
        ;;
    :)
        echo "Option -${OPTARG} requires arguement." >&2
        print_help
        exit 1
        ;;
    esac
    shift 1
done

gcloud_create()
{
    gcloud compute instances create ${1} \
        --zone "us-central1-f" --machine-type "n1-standard-1" \
        --network "development" \
        --metadata-from-file startup-script=${2} \
        --maintenance-policy "MIGRATE" \
        --scopes "https://www.googleapis.com/auth/devstorage.read_only" \
        --tags "alt-http-server" \
        --image "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1404-trusty-v20141031a"
}

generate_build_script()
{
    case $1 in
        master)
            if [ -z ${2+x} ];then 
                container="rancher/server"
            else
                container=$2
            fi
            DOCKER_CMD="docker run -d -p 8080:8080 ${container}"
            BUILD_FILE="/tmp/10acre-master-build.sh"
            ;;
        worker)
            if [ -z ${2+x} ];then 
                container="rancher/agent"
            else
                container=$2
            fi

            IP=$(get_master_ip)
            DOCKER_CMD="docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock ${container} http://${IP}:8080"
            BUILD_FILE="/tmp/10acre-worker-build.sh"
            ;;
        *)
            echo "Can not generate build script"
            exit 1
            ;;
    esac
cat > ${BUILD_FILE} << EOF
#!/bin/bash

curl -sSL https://get.docker.com/| sh
sleep 5
${DOCKER_CMD}
EOF
}

build_master()
{
    MASTER_NAME="$(whoami)-rancher-dev-master-0"
    generate_build_script "master"
    gcloud_create "${MASTER_NAME}" "/tmp/10acre-master-build.sh"
}

build_compute()
{
    generate_build_script "worker"
    gcloud_create "${INSTANCES}" "/tmp/10acre-worker-build.sh"
}

main()
{
    build_master
    build_compute
}
main
