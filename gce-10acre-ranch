#!/bin/bash

set -e

if [ $(whoami) == "root" ];then
    echo "Do not run as root!" >&2
    exit 1
fi

gcloud -v 2>&1 > /dev/null || { echo "gcloud command not found." >&2 ;exit 1; }

print_help()
{
cat >&2 <<EOF
gce-10acre-ranch Usage:
    gce-10acre-ranch [opts] 
    -a - Agent Container:
            needs full container repo/name[:tag]
    -b - Build a new cluster
    -c - Cluster name[Required]
    -d - DELETE ALL NODES
    -i - Show the IP address of the master
    -h - Print this message
    -l - List nodes
    -n - Number of nodes 
    -s - Server Container:
            needs full container repo/name[:tag] 
    -o - OS image
EOF
}

while getopts ":a:bc:dhiln:s:" opt;do
    case $opt in
    a)
        AGENT_CONTAINER="${OPTARG}"
        ;;
    b)
        BUILD_CLUSTER_FLAG="true"
        ;;
    c)
        # Add 10acre so that you can't list/delete lots of hosts easily.
        CLUSTER_NAME="${OPTARG}-10acre"
        MASTER_NAME="${CLUSTER_NAME}-master-0"
        ;;
    d)
        DELETE_NODES_FLAG="true"
        ;;
    h)
        print_help
        exit 1
        ;;
    i)
        MASTER_IP_FLAG="true"
        ;;
    l)
        LIST_NODES_FLAG="true"
        ;;
    n)
        INSTANCE_COUNT=$OPTARG
        ;;
    s)
        SERVER_CONTAINER="${OPTARG}"
        ;;
    \?)
        echo "Invalid arguemnts" >&2
        print_help
        exit 1
        ;;
    :)
        echo "Option -${OPTARG} requires arguement." >&2
        print_help
        exit 1
        ;;
    esac
done
shift $((OPTIND-1))

validate_vars()
{
    if [ -z ${CLUSTER_NAME+x} ];then { echo "Need to specify cluster name" >&2; print_help; exit 1; } fi
    if [ -z ${INSTANCE_COUNT+x} ] && [ "${BUILD_CLUSTER_FLAG}" == "true" ]; then { echo "Please specify number of nodes with -n" >&2; print_help; exit 1; } fi
}
validate_vars

list_nodes()
{
    gcloud compute instances list --zone us-central1-f --regex "${CLUSTER_NAME}.*"
}

delete_nodes()
{
    NODES=$(list_nodes|grep -v ^NAME|cut -d' ' -f1)

    # This will prompt the user to confirm.
    gcloud compute instances delete --zone us-central1-f $NODES
}

get_master_ip()
{
    IP=$(gcloud compute instances describe "${MASTER_NAME}" --zone us-central1-f|grep natIP |cut -d':' -f2)
    echo $IP
}


if [ "${LIST_NODES_FLAG}" == "true" ];then { list_nodes "$CLUSTER_NAME"; exit 0; } fi

gcloud_create()
{
    gcloud compute instances create ${1} \
        --zone "us-central1-f" --machine-type "n1-standard-1" \
        --network "development" \
        --metadata-from-file startup-script=${2} \
        --maintenance-policy "MIGRATE" \
        --scopes "https://www.googleapis.com/auth/devstorage.read_only" \
        --tags "alt-http-server" \
        --image "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1404-trusty-v20141031a"
}


generate_build_script() # signature: role container
{
    case $1 in
        master)
            default_container="rancher/server"

            DOCKER_OPTS="run -d -p 8080:8080"
            BUILD_FILE="/tmp/10acre-master-build.sh"
            ;;
        worker)
            default_container="rancher/agent"

            IP=$(get_master_ip)
            DOCKER_OPTS="run --rm -it -v /var/run/docker.sock:/var/run/docker.sock"
            DOCKER_CMD="http://${IP}:8080"
            BUILD_FILE="/tmp/10acre-worker-build.sh"
            ;;
        *)
            echo "Can not generate build script"
            exit 1
            ;;
    esac

    if [ -z ${2} ];then
        container=${default_container}
    else
        container="${2}"
    fi

cat > ${BUILD_FILE} << EOF
#!/bin/bash

curl -sSL https://get.docker.com/| sh
sleep 5
docker ${DOCKER_OPTS} ${container} $DOCKER_CMD
EOF
}

build_master()
{
    generate_build_script "master" "${SERVER_CONTAINER}"
    gcloud_create "${MASTER_NAME}" "/tmp/10acre-master-build.sh"
}

build_compute()
{
    INSTANCES="";for i in $(seq 1 ${INSTANCE_COUNT});do INSTANCES="${CLUSTER_NAME}-${i} ${INSTANCES}";done
    generate_build_script "worker" "${AGENT_CONTAINER}"
    gcloud_create "${INSTANCES}" "/tmp/10acre-worker-build.sh"
}

build_cluster()
{
    build_master
    build_compute
}

main() 
{
    if [ "${LIST_NODES_FLAG}" == "true" ];then { list_nodes; exit 0; } fi
    if [ "${MASTER_IP_FLAG}" == "true" ]; then { get_master_ip; exit 0; } fi
    if [ "${DELETE_NODES_FLAG}" == "true" ];then { delete_nodes; exit 0; } fi
    if [ "${BUILD_CLUSTER_FLAG}" == "true" ];then { build_cluster; exit 0;} fi
}
main
